<?php if(!defined('IN_ET')) define('IN_ET',true);if(!defined('ET_URL')) define('ET_URL','http://www.myerp.com/');if(!defined('SITE_INDEX')) define('SITE_INDEX','http://www.myerp.com/Index.php?s=/');if(!defined('SITE_DATA')) define('SITE_DATA','http://www.myerp.com/data/');if(!defined('LOGIN_TIME_REMEMBER')) define('LOGIN_TIME_REMEMBER',2592000);if(!defined('LOGIN_TIME')) define('LOGIN_TIME',21600);if(!defined('ET_ROOT')) define('ET_ROOT','E:\\Myerp');if(!defined('THINK_MODE')) define('THINK_MODE','Mycore');if(!defined('THINK_PATH')) define('THINK_PATH','./ThinkPHP');if(!defined('APP_NAME')) define('APP_NAME','Myerp');if(!defined('APP_PATH')) define('APP_PATH','./Myerp');if(!defined('DEFAULT_TYPE')) define('DEFAULT_TYPE','default');if(!defined('__PUBLIC__')) define('__PUBLIC__','http://www.myerp.com/Public');if(!defined('SITE_URL')) define('SITE_URL','http://www.myerp.com/');if(!defined('MEMORY_LIMIT_ON')) define('MEMORY_LIMIT_ON',true);if(!defined('RUNTIME_PATH')) define('RUNTIME_PATH','./Myerp/Runtime/');if(!defined('MAGIC_QUOTES_GPC')) define('MAGIC_QUOTES_GPC',false);if(!defined('IS_CGI')) define('IS_CGI',0);if(!defined('IS_WIN')) define('IS_WIN',1);if(!defined('IS_CLI')) define('IS_CLI',0);if(!defined('_PHP_FILE_')) define('_PHP_FILE_','/Index.php');if(!defined('__ROOT__')) define('__ROOT__','');if(!defined('URL_COMMON')) define('URL_COMMON',0);if(!defined('URL_PATHINFO')) define('URL_PATHINFO',1);if(!defined('URL_REWRITE')) define('URL_REWRITE',2);if(!defined('URL_COMPAT')) define('URL_COMPAT',3);if(!defined('THINK_VERSION')) define('THINK_VERSION','2.2');if(!defined('THINK_RELEASE')) define('THINK_RELEASE','20120323');if(!defined('CACHE_DIR')) define('CACHE_DIR','Cache');if(!defined('HTML_DIR')) define('HTML_DIR','Html');if(!defined('CONF_DIR')) define('CONF_DIR','Conf');if(!defined('LIB_DIR')) define('LIB_DIR','Lib');if(!defined('LOG_DIR')) define('LOG_DIR','Logs');if(!defined('LANG_DIR')) define('LANG_DIR','Lang');if(!defined('TEMP_DIR')) define('TEMP_DIR','Temp');if(!defined('TMPL_DIR')) define('TMPL_DIR','Tpl');if(!defined('TMPL_PATH')) define('TMPL_PATH','./Myerp/Tpl/');if(!defined('HTML_PATH')) define('HTML_PATH','./Myerp/Html/');if(!defined('COMMON_PATH')) define('COMMON_PATH','./Myerp/Common/');if(!defined('LIB_PATH')) define('LIB_PATH','./Myerp/Lib/');if(!defined('CACHE_PATH')) define('CACHE_PATH','./Myerp/Runtime/Cache/');if(!defined('CONFIG_PATH')) define('CONFIG_PATH','./Myerp/Conf/');if(!defined('LOG_PATH')) define('LOG_PATH','./Myerp/Runtime/Logs/');if(!defined('LANG_PATH')) define('LANG_PATH','./Myerp/Lang/');if(!defined('TEMP_PATH')) define('TEMP_PATH','./Myerp/Runtime/Temp/');if(!defined('DATA_PATH')) define('DATA_PATH','./Myerp/Runtime/Data/');if(!defined('VENDOR_PATH')) define('VENDOR_PATH','./ThinkPHP/Vendor/');if(!defined('HAS_ONE')) define('HAS_ONE',1);if(!defined('BELONGS_TO')) define('BELONGS_TO',2);if(!defined('HAS_MANY')) define('HAS_MANY',3);if(!defined('MANY_TO_MANY')) define('MANY_TO_MANY',4);if(!defined('BUILD_DIR_SECURE')) define('BUILD_DIR_SECURE',false); function N($key, $step=0) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = 0; } if (empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key] + (int) $step; } function U($url, $params=array(), $redirect=false, $suffix=true) { if (0 === strpos($url, '/')) $url = substr($url, 1); if (!strpos($url, '://')) $url = APP_NAME . '://' . $url; if (stripos($url, '@?')) { $url = str_replace('@?', '@think?', $url); } elseif (stripos($url, '@')) { $url = $url . MODULE_NAME; } $array = parse_url($url); $app = isset($array['scheme']) ? $array['scheme'] : APP_NAME; $route = isset($array['user']) ? $array['user'] : ''; if (defined('GROUP_NAME') && strcasecmp(GROUP_NAME, C('DEFAULT_GROUP'))) $group = GROUP_NAME; if (isset($array['path'])) { $action = substr($array['path'], 1); if (!isset($array['host'])) { $module = MODULE_NAME; } else { if (strpos($array['host'], '-')) { list($group, $module) = explode('-', $array['host']); } else { $module = $array['host']; } } } else { $module = MODULE_NAME; $action = $array['host']; } if (isset($array['query'])) { parse_str($array['query'], $query); $params = array_merge($query, $params); } if (C('APP_SUB_DOMAIN_DEPLOY')) { foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) { if (in_array($group . "/", $rule)) $flag = true; if (in_array($group . "/" . $module, $rule)) { $flag = true; unset($module); } if (!isset($group) && in_array(GROUP_NAME . "/" . $module, $rule) && in_array($key,array(SUB_DOMAIN,"*"))) unset($module); if ($flag) { unset($group); if ($key != SUB_DOMAIN && $key != "*") { $sub_domain = $key; } break; } } } if(0 == strcasecmp($group, C('DEFAULT_GROUP'))) unset($group); if (C('URL_MODEL') > 0) { $depr = C('URL_PATHINFO_DEPR'); $str = $depr; foreach ($params as $var => $val) $str .= $var . $depr . $val . $depr; $str = substr($str, 0, -1); $group = isset($group) ? $group . $depr : ''; $module = isset($module) ? $module . $depr : ""; if (!empty($route)) { $url = str_replace(APP_NAME, $app, __APP__) . '/' . $group . $route . $str; } else { $url = str_replace(APP_NAME, $app, __APP__) . '/' . $group . $module . $action . $str; } if ($suffix && C('URL_HTML_SUFFIX')) $url .= C('URL_HTML_SUFFIX'); }else { $params = http_build_query($params); $params = !empty($params) ? '&' . $params : ''; if (isset($group)) { $url = str_replace(APP_NAME, $app, __APP__) . '?' . C('VAR_GROUP') . '=' . $group . '&' . C('VAR_MODULE') . '=' . $module . '&' . C('VAR_ACTION') . '=' . $action . $params; } else { $url = str_replace(APP_NAME, $app, __APP__) . '?' . C('VAR_MODULE') . '=' . $module . '&' . C('VAR_ACTION') . '=' . $action . $params; } } if (isset($sub_domain)) { $domain = str_replace(SUB_DOMAIN, $sub_domain, $_SERVER['HTTP_HOST']); $url = "http://" . $domain . $url; } if ($redirect) redirect($url); else return $url; } function parse_name($name, $type=0) { if ($type) { return ucfirst(preg_replace("/_([a-zA-Z])/e", "strtoupper('\\1')", $name)); } else { $name = preg_replace("/[A-Z]/", "_\\0", $name); return strtolower(trim($name, "_")); } } function halt($error) { if (IS_CLI) exit($error); $e = array(); if (C('APP_DEBUG')) { if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['class'] = $trace[0]['class']; $e['function'] = $trace[0]['function']; $e['line'] = $trace[0]['line']; $traceInfo = ''; $time = date("y-m-d H:i:m"); foreach ($trace as $t) { $traceInfo .= '[' . $time . '] ' . $t['file'] . ' (' . $t['line'] . ') '; $traceInfo .= $t['class'] . $t['type'] . $t['function'] . '('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")<br/>"; } $e['trace'] = $traceInfo; } else { $e = $error; } include C('TMPL_EXCEPTION_FILE'); } else { $error_page = C('ERROR_PAGE'); if (!empty($error_page)) { redirect($error_page); } else { if (C('SHOW_ERROR_MSG')) $e['message'] = is_array($error) ? $error['message'] : $error; else $e['message'] = C('ERROR_MESSAGE'); include C('TMPL_EXCEPTION_FILE'); } } exit; } function redirect($url, $time=0, $msg='') { $url = str_replace(array("\n", "\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header("Location: " . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function throw_exception($msg, $type='ThinkException', $code=0) { if (IS_CLI) exit($msg); if (class_exists($type, false)) throw new $type($msg, $code, true); else halt($msg); } function debug_start($label='') { $GLOBALS[$label]['_beginTime'] = microtime(TRUE); if (MEMORY_LIMIT_ON) $GLOBALS[$label]['_beginMem'] = memory_get_usage(); } function debug_end($label='') { $GLOBALS[$label]['_endTime'] = microtime(TRUE); echo '<div style="text-align:center;width:100%">Process ' . $label . ': Times ' . number_format($GLOBALS[$label]['_endTime'] - $GLOBALS[$label]['_beginTime'], 6) . 's '; if (MEMORY_LIMIT_ON) { $GLOBALS[$label]['_endMem'] = memory_get_usage(); echo ' Memories ' . number_format(($GLOBALS[$label]['_endMem'] - $GLOBALS[$label]['_beginMem']) / 1024) . ' k'; } echo '</div>'; } function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = "<pre>" . $label . htmlspecialchars($output, ENT_QUOTES) . "</pre>"; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace("/\]\=\>\n(\s+)/m", "] => ", $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function get_instance_of($name, $method='', $args=array()) { static $_instance = array(); $identify = empty($args) ? $name . $method : $name . $method . to_guid_string($args); if (!isset($_instance[$identify])) { if (class_exists($name)) { $o = new $name(); if (method_exists($o, $method)) { if (!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); } else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_') . ':' . $name); } return $_instance[$identify]; } function __autoload($name) { return Think::autoload($name); } function require_cache($filename) { static $_importFiles = array(); $filename = realpath($filename); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && C('APP_FILE_CASE')) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext='.class.php') { static $_file = array(); static $_class = array(); $class = str_replace(array('.', '#'), array('/', '.'), $class); if ('' === $baseUrl && false === strpos($class, '/')) { return alias_import($class); } if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode("/", $class); if (empty($baseUrl)) { if ('@' == $class_strut[0] || APP_NAME == $class_strut[0]) { $baseUrl = dirname(LIB_PATH); $class = substr_replace($class, 'Lib/', 0, strlen($class_strut[0]) + 1); } elseif (in_array(strtolower($class_strut[0]), array('think', 'org', 'com'))) { $baseUrl = THINK_PATH . '/Lib/'; } else { $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); $baseUrl = APP_PATH . '/../' . $class_strut[0] . '/' . LIB_DIR . '/'; } } if (substr($baseUrl, -1) != "/") $baseUrl .= "/"; $classfile = $baseUrl . $class . $ext; if ($ext == '.class.php' && is_file($classfile)) { $class = basename($classfile, $ext); if (isset($_class[$class])) throw_exception(L('_CLASS_CONFLICT_') . ':' . $_class[$class] . ' ' . $classfile); $_class[$class] = $classfile; } return require_cache($classfile); } function load($name, $baseUrl='', $ext='.php') { $name = str_replace(array('.', '#'), array('/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@/')) { $baseUrl = APP_PATH . '/Common/'; $name = substr($name, 2); } else { $baseUrl = THINK_PATH . '/Common/'; } } if (substr($baseUrl, -1) != "/") $baseUrl .= "/"; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext='.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function alias_import($alias, $classfile='') { static $_alias = array(); if ('' !== $classfile) { $_alias[$alias] = $classfile; return; } if (is_string($alias)) { if (isset($_alias[$alias])) return require_cache($_alias[$alias]); }elseif (is_array($alias)) { foreach ($alias as $key => $val) $_alias[$key] = $val; return; } return false; } function D($name='', $app='') { static $_model = array(); if (empty($name)) return new Model; if (empty($app)) $app = C('DEFAULT_APP'); if (isset($_model[$app . $name])) return $_model[$app . $name]; $OriClassName = $name; if (strpos($name, '.')) { $array = explode('.', $name); $name = array_pop($array); $className = $name . 'Model'; import($app . '.Model.' . implode('.', $array) . '.' . $className); } else { $className = $name . 'Model'; import($app . '.Model.' . $className); } if (class_exists($className)) { $model = new $className(); } else { $model = new Model($name); } $_model[$app . $OriClassName] = $model; return $model; } function M($name='', $class='Model') { static $_model = array(); if (!isset($_model[$name . '_' . $class])) $_model[$name . '_' . $class] = new $class($name); return $_model[$name . '_' . $class]; } function A($name, $app='@') { static $_action = array(); if (isset($_action[$app . $name])) return $_action[$app . $name]; $OriClassName = $name; if (strpos($name, '.')) { $array = explode('.', $name); $name = array_pop($array); $className = $name . 'Action'; import($app . '.Action.' . implode('.', $array) . '.' . $className); } else { $className = $name . 'Action'; import($app . '.Action.' . $className); } if (class_exists($className,false)) { $action = new $className(); $_action[$app . $OriClassName] = $action; return $action; } else { return false; } } function R($module, $action, $app='@') { $class = A($module, $app); if ($class) return call_user_func(array(&$class, $action)); else return false; } function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)) return isset($_lang[$name]) ? $_lang[$name] : $name; $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function C($name=null, $value=null) { static $_config = array(); if (empty($name)) return $_config; if (is_string($name)) { if (!strpos($name, '.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)){ return $_config = array_merge($_config, array_change_key_case($name)); } return null; } function tag($name, $params=array()) { $tags = C('TAGS.' . $name); if (!empty($tags)) { foreach ($tags as $key => $call) { $result = B($call, $params); } } } function filter($name, &$content) { $class = $name . 'Filter'; require_cache(LIB_PATH . 'Filter/' . $class . '.class.php'); $filter = new $class(); $content = $filter->run($content); } function B($name, $params=array()) { $class = $name . 'Behavior'; require_cache(LIB_PATH . 'Behavior/' . $class . '.class.php'); $behavior = new $class(); return $behavior->run($params); } function W($name, $data=array(), $return=false) { $class = $name . 'Widget'; require_cache(LIB_PATH . 'Widget/' . $class . '.class.php'); if (!class_exists($class)) throw_exception(L('_CLASS_NOT_EXIST_') . ':' . $class); $widget = Think::instance($class); $content = $widget->render($data); if ($return) return $content; else echo $content; } function S($name, $value='', $expire='', $type='',$options=null) { static $_cache = array(); alias_import('Cache'); $cache = Cache::getInstance($type,$options); if ('' !== $value) { if (is_null($value)) { $result = $cache->rm($name); if ($result) unset($_cache[$type . '_' . $name]); return $result; }else { $cache->set($name, $value, $expire); $_cache[$type . '_' . $name] = $value; } return; } if (isset($_cache[$type . '_' . $name])) return $_cache[$type . '_' . $name]; $value = $cache->get($name); $_cache[$type . '_' . $name] = $value; return $value; } function F($name, $value='', $path=DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { return unlink($filename); } else { $dir = dirname($filename); if (!is_dir($dir)) mkdir($dir); $_cache[$name] = $value; return file_put_contents($filename, strip_whitespace("<?php\nreturn " . var_export($value, true) . ";\n?>")); } } if (isset($_cache[$name])) return $_cache[$name]; if (is_file($filename)) { $value = include $filename; $_cache[$name] = $value; } else { $value = false; } return $value; } function to_guid_string($mix) { if (is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\n"; for($k = $i+1; $k < $j; $k++) { if(is_string($tokens[$k]) && $tokens[$k] == ";") { $i = $k; break; } else if($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function mk_dir($dir, $mode = 0777) { if (is_dir($dir) || @mkdir($dir, $mode)) return true; if (!mk_dir(dirname($dir), $mode)) return false; return @mkdir($dir, $mode); } function auto_charset($fContents, $from='gbk', $to='utf-8') { $from = strtoupper($from) == 'UTF8' ? 'utf-8' : $from; $to = strtoupper($to) == 'UTF8' ? 'utf-8' : $to; if (strtoupper($from) === strtoupper($to) || empty($fContents) || (is_scalar($fContents) && !is_string($fContents))) { return $fContents; } if (is_string($fContents)) { if (function_exists('mb_convert_encoding')) { return mb_convert_encoding($fContents, $to, $from); } elseif (function_exists('iconv')) { return iconv($from, $to, $fContents); } else { return $fContents; } } elseif (is_array($fContents)) { foreach ($fContents as $key => $val) { $_key = auto_charset($key, $from, $to); $fContents[$_key] = auto_charset($val, $from, $to); if ($key != $_key) unset($fContents[$key]); } return $fContents; } else { return $fContents; } } function xml_encode($data, $encoding='utf-8', $root="think") { $xml = '<?xml version="1.0" encoding="' . $encoding . '"?>'; $xml.= '<' . $root . '>'; $xml.= data_to_xml($data); $xml.= '</' . $root . '>'; return $xml; } function data_to_xml($data) { if (is_object($data)) { $data = get_object_vars($data); } $xml = ''; foreach ($data as $key => $val) { is_numeric($key) && $key = "item id=\"$key\""; $xml.="<$key>"; $xml.= ( is_array($val) || is_object($val)) ? data_to_xml($val) : $val; list($key, ) = explode(' ', $key); $xml.="</$key>"; } return $xml; } function cookie($name, $value='', $option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!empty($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'] . $name; if ('' === $value) { return isset($_COOKIE[$name]) ? $_COOKIE[$name] : null; } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } class Think { private static $_instance = array(); public function __set($name ,$value) { if(property_exists($this,$name)) $this->$name = $value; } public function __get($name) { return isset($this->$name)?$this->$name:null; } public static function autoload($classname) { if(alias_import($classname)) return ; if(substr($classname,-5)=="Model") { require_cache(LIB_PATH.'Model/'.$classname.'.class.php'); }elseif(substr($classname,-6)=="Action"){ require_cache(LIB_PATH.'Action/'.$classname.'.class.php'); }else { if(C('APP_AUTOLOAD_PATH')) { $paths = explode(',',C('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(import($path.$classname)) return ; } } } return ; } static public function instance($class,$method='') { $identify = $class.$method; if(!isset(self::$_instance[$identify])) { if(class_exists($class)){ $o = new $class(); if(!empty($method) && method_exists($o,$method)) self::$_instance[$identify] = call_user_func_array(array(&$o, $method)); else self::$_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_').':'.$class); } return self::$_instance[$identify]; } } class ThinkException extends Exception { private $type; private $extra; public function __construct($message,$code=0,$extra=false) { parent::__construct($message,$code); $this->type = get_class($this); $this->extra = $extra; } public function __toString() { $trace = $this->getTrace(); if($this->extra) array_shift($trace); $this->class = $trace[0]['class']; $this->function = $trace[0]['function']; $this->file = $trace[0]['file']; $this->line = $trace[0]['line']; $file = file($this->file); $traceInfo=''; $time = date("y-m-d H:i:m"); foreach($trace as $t) { $traceInfo .= '['.$time.'] '.$t['file'].' ('.$t['line'].') '; $traceInfo .= $t['class'].$t['type'].$t['function'].'('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")\n"; } $error['message'] = $this->message; $error['type'] = $this->type; $error['detail'] = L('_MODULE_').'['.MODULE_NAME.'] '.L('_ACTION_').'['.ACTION_NAME.']'."\n"; $error['detail'] .= ($this->line-2).': '.$file[$this->line-3]; $error['detail'] .= ($this->line-1).': '.$file[$this->line-2]; $error['detail'] .= '<font color="#FF6600" >'.($this->line).': <strong>'.$file[$this->line-1].'</strong></font>'; $error['detail'] .= ($this->line+1).': '.$file[$this->line]; $error['detail'] .= ($this->line+2).': '.$file[$this->line+1]; $error['class'] = $this->class; $error['function'] = $this->function; $error['file'] = $this->file; $error['line'] = $this->line; $error['trace'] = $traceInfo; if(C('LOG_EXCEPTION_RECORD')) { Log::Write('('.$this->type.') '.$this->message); } return $error ; } } class Log extends Think { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const TCP = 2; const FILE = 3; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { if($record || in_array($level,C('LOG_RECORD_LEVEL'))) { $now = date(self::$format); self::$log[] = "{$now} ".$_SERVER['REQUEST_URI']." | {$level}: {$message}\r\n"; } } static function save($type=self::FILE,$destination='',$extra='') { if(empty($destination)) $destination = LOG_PATH.date('y_m_d').".log"; if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log(implode("",self::$log), $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type=self::FILE,$destination='',$extra='') { $now = date(self::$format); if(empty($destination)) $destination = LOG_PATH.date('y_m_d').".log"; if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } error_log("{$now} ".$_SERVER['REQUEST_URI']." | {$level}: {$message}\r\n", $type,$destination,$extra ); } } class App { static public function init() { set_error_handler(array('App','appError')); set_exception_handler(array('App','appException')); if(function_exists('spl_autoload_register')) spl_autoload_register(array('Think', 'autoload')); if(function_exists('date_default_timezone_set')) date_default_timezone_set(C('DEFAULT_TIMEZONE')); if(is_file(COMMON_PATH.'extend.php')) include COMMON_PATH.'extend.php'; Dispatcher::dispatch(); if(is_file(CONFIG_PATH.strtolower(MODULE_NAME).'_config.php')) C(include CONFIG_PATH.strtolower(MODULE_NAME).'_config.php'); App::checkLanguage(); App::checkTemplate(); if(C('HTML_CACHE_ON')) HtmlCache::readHTMLCache(); return ; } static private function checkLanguage() { $langSet = C('DEFAULT_LANG'); if (!C('LANG_SWITCH_ON')){ L(include THINK_PATH.'/Lang/'.$langSet.'.php'); return; } if (C('LANG_AUTO_DETECT')){ if(isset($_GET[C('VAR_LANGUAGE')])){ $langSet = $_GET[C('VAR_LANGUAGE')]; cookie('think_language',$langSet,3600); }elseif(cookie('think_language')){ $langSet = cookie('think_language'); }elseif(isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])){ preg_match('/^([a-z\-]+)/i', $_SERVER['HTTP_ACCEPT_LANGUAGE'], $matches); $langSet = $matches[1]; cookie('think_language',$langSet,3600); } } define('LANG_SET',strtolower($langSet)); if(is_file(THINK_PATH.'/Lang/'.LANG_SET.'.php')) L(include THINK_PATH.'/Lang/'.LANG_SET.'.php'); if (is_file(LANG_PATH.LANG_SET.'/common.php')) L(include LANG_PATH.LANG_SET.'/common.php'); $group = ''; if (defined('GROUP_NAME')){ $group = GROUP_NAME.C('TMPL_FILE_DEPR'); if (is_file(LANG_PATH.LANG_SET.'/'.$group.'lang.php')) L(include LANG_PATH.LANG_SET.'/'.$group.'lang.php'); } if (is_file(LANG_PATH.LANG_SET.'/'.$group.strtolower(MODULE_NAME).'.php')) L(include LANG_PATH.LANG_SET.'/'.$group.strtolower(MODULE_NAME).'.php'); } static private function checkTemplate() { $templateSet = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $templateSet = $_GET[$t]; }elseif(cookie('think_template')){ $templateSet = cookie('think_template'); } if(!is_dir(TMPL_PATH.$templateSet)) $templateSet = C('DEFAULT_THEME'); cookie('think_template',$templateSet); } define('TEMPLATE_NAME', $templateSet); define('APP_TMPL_PATH', __ROOT__.'/'.(APP_NAME?APP_NAME.'/':'').TMPL_DIR.'/'.(TEMPLATE_NAME?TEMPLATE_NAME.'/':'')); define('TEMPLATE_PATH', TMPL_PATH.(TEMPLATE_NAME?TEMPLATE_NAME.'/':'')); define('__CURRENT__', APP_TMPL_PATH.MODULE_NAME); define('WEB_PUBLIC_PATH', __ROOT__.'/Public'); define('APP_PUBLIC_PATH', APP_TMPL_PATH.'Public'); if(defined('GROUP_NAME')) { C('TMPL_FILE_NAME',TEMPLATE_PATH.GROUP_NAME.'/'.MODULE_NAME.C('TMPL_FILE_DEPR').ACTION_NAME.C('TMPL_TEMPLATE_SUFFIX')); C('CACHE_PATH',CACHE_PATH.GROUP_NAME.'/'); }else{ C('TMPL_FILE_NAME',TEMPLATE_PATH.MODULE_NAME.'/'.ACTION_NAME.C('TMPL_TEMPLATE_SUFFIX')); C('CACHE_PATH',CACHE_PATH); } return ; } static public function exec() { if(!preg_match('/^[A-Za-z_0-9]+$/',MODULE_NAME)){ throw_exception(L('_MODULE_NOT_EXIST_')); } $group = defined('GROUP_NAME') ? GROUP_NAME.C('APP_GROUP_DEPR') : ''; $module = A($group.MODULE_NAME); if(!$module) { $_module = C('modules.'.MODULE_NAME); if($_module) { import($_module[0]); $class = isset($_module[1])?$_module[1]:MODULE_NAME.'Action'; $module = new $class; }else{ $module = A("Empty"); } if(!$module) { if(C('APP_DEBUG')) { throw_exception(L('_MODULE_NOT_EXIST_').MODULE_NAME); }else{ header('HTTP/1.1 404 Not Found'); header('Status:404 Not Found'); exit; } } } $action = ACTION_NAME; if (method_exists($module,'_before_'.$action)) { call_user_func(array(&$module,'_before_'.$action)); } call_user_func(array(&$module,$action)); if (method_exists($module,'_after_'.$action)) { call_user_func(array(&$module,'_after_'.$action)); } return ; } static public function run() { App::init(); $plugin = C('APP_PLUGIN_ON'); if($plugin) tag('app_begin'); if(isset($_REQUEST[C("VAR_SESSION_ID")])) session_id($_REQUEST[C("VAR_SESSION_ID")]); if(C('SESSION_AUTO_START')) session_start(); if(C('SHOW_RUN_TIME')) G('initTime'); App::exec(); if($plugin) tag('app_end'); if(C('LOG_RECORD')) Log::save(); return ; } static public function appException($e) { halt($e->__toString()); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_USER_ERROR: $errorStr = "[$errno] $errstr ".basename($errfile)." 第 $errline 行."; if(C('LOG_RECORD')) Log::write($errorStr,Log::ERR); halt($errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".basename($errfile)." 第 $errline 行."; Log::record($errorStr,Log::NOTICE); break; } } }; class View extends Think{ protected $tVar = array(); protected $trace = array(); protected $templateFile = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }elseif(is_object($name)){ foreach($name as $key =>$val) $this->tVar[$key] = $val; }else { $this->tVar[$name] = $value; } } public function trace($title,$value='') { if(is_array($title)) $this->trace = array_merge($this->trace,$title); else $this->trace[$title] = $value; } public function get($name){ if(isset($this->tVar[$name])) return $this->tVar[$name]; else return false; } public function getAllVar(){ return $this->tVar; } public function traceVar(){ foreach ($this->tVar as $name=>$val){ dump($val,1,'['.$name.']<br/>'); } } public function display($templateFile='',$charset='',$contentType='') { $this->fetch($templateFile,$charset,$contentType,true); } protected function layout($content,$charset='',$contentType='') { if(false !== strpos($content,'<!-- layout')) { $find = preg_match_all('/<!-- layout::(.+?)::(.+?) -->/is',$content,$matches); if($find) { for ($i=0; $i< $find; $i++) { if(0===strpos($matches[1][$i],'$')) $matches[1][$i] = $this->get(substr($matches[1][$i],1)); if(0 != $matches[2][$i] ) { $guid = md5($matches[1][$i]); $cache = S($guid); if($cache) { $layoutContent = $cache; }else{ $layoutContent = $this->fetch($matches[1][$i],$charset,$contentType); S($guid,$layoutContent,$matches[2][$i]); } }else{ $layoutContent = $this->fetch($matches[1][$i],$charset,$contentType); } $content = str_replace($matches[0][$i],$layoutContent,$content); } } } return $content; } public function fetch($templateFile='',$charset='',$contentType='',$display=false) { G('viewStartTime'); if(null===$templateFile) return; if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: private'); header('X-Powered-By:ThinkPHP'); ob_start(); ob_implicit_flush(0); if(!file_exists_case($templateFile)) $templateFile = $this->parseTemplateFile($templateFile); $engine = strtolower(C('TMPL_ENGINE_TYPE')); if('php'==$engine) { extract($this->tVar, EXTR_OVERWRITE); include $templateFile; }elseif('think'==$engine && $this->checkCache($templateFile)) { extract($this->tVar, EXTR_OVERWRITE); include C('CACHE_PATH').md5($templateFile).C('TMPL_CACHFILE_SUFFIX'); }else{ $className = 'Template'.ucwords($engine); require_cache(THINK_PATH.'/Lib/Think/Util/Template/'.$className.'.class.php'); $tpl = new $className; $tpl->fetch($templateFile,$this->tVar,$charset); } $this->templateFile = $templateFile; $content = ob_get_clean(); $content = $this->templateContentReplace($content); $content = $this->layout($content,$charset,$contentType); return $this->output($content,$display); } protected function checkCache($tmplTemplateFile) { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH').md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX'); if(!is_file($tmplCacheFile)){ return false; }elseif (filemtime($tmplTemplateFile) > filemtime($tmplCacheFile)) { return false; }elseif (C('TMPL_CACHE_TIME') != 0 && time() > filemtime($tmplCacheFile)+C('TMPL_CACHE_TIME')) { return false; } return true; } public function buildHtml($htmlfile,$htmlpath='',$templateFile='',$charset='',$contentType='') { $content = $this->fetch($templateFile,$charset,$contentType); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); if(!is_dir(dirname($htmlfile))) mk_dir(dirname($htmlfile)); if(false === file_put_contents($htmlfile,$content)) throw_exception(L('_CACHE_WRITE_ERROR_').':'.$htmlfile); return $content; } protected function output($content,$display) { if(C('HTML_CACHE_ON')) HtmlCache::writeHTMLCache($content); if($display) { if(C('SHOW_RUN_TIME')){ if(false !== strpos($content,'{__NORUNTIME__}')) { $content = str_replace('{__NORUNTIME__}','',$content); }else{ $runtime = $this->showTime(); if(strpos($content,'{__RUNTIME__}')) $content = str_replace('{__RUNTIME__}',$runtime,$content); else $content .= $runtime; } }else{ $content = str_replace(array('{__NORUNTIME__}','{__RUNTIME__}'),'',$content); } echo $content; if(C('SHOW_PAGE_TRACE')) $this->showTrace(); return null; }else { return $content; } } protected function templateContentReplace($content) { $replace = array( '../Public' => APP_PUBLIC_PATH, '__PUBLIC__' => WEB_PUBLIC_PATH, '__TMPL__' => APP_TMPL_PATH, '__ROOT__' => __ROOT__, '__APP__' => __APP__, '__GROUP__' => defined('GROUP_NAME')?__GROUP__:__APP__, '__UPLOAD__' => __ROOT__.'/Uploads', '__ACTION__' => __ACTION__, '__SELF__' => __SELF__, '__URL__' => __URL__, '__INFO__' => __INFO__, ); if(C('TOKEN_ON')) { if(strpos($content,'{__TOKEN__}')) { $replace['{__TOKEN__}'] = $this->buildFormToken(); }elseif(strpos($content,'{__NOTOKEN__}')){ $replace['{__NOTOKEN__}'] = $this->buildFormToken(); }elseif(preg_match('/<\/form(\s*)>/is',$content,$match)) { $replace[$match[0]] = $this->buildFormToken().$match[0]; } } if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); return $content; } private function buildFormToken() { $tokenName = C('TOKEN_NAME'); $tokenType = C('TOKEN_TYPE'); if(!isset($_SESSION[$tokenName])) { $_SESSION[$tokenName] = array(); } $tokenKey = md5(__SELF__); if(isset($_SESSION[$tokenName][$tokenKey])) { $tokenValue = $_SESSION[$tokenName][$tokenKey]; }else{ $tokenValue = $tokenType(microtime(TRUE)); $_SESSION[$tokenName][$tokenKey] = $tokenValue; } $token = '<input type="hidden" name="'.$tokenName.'" value="'.$tokenKey.'_'.$tokenValue.'" />'; return $token; } private function parseTemplateFile($templateFile) { if(''==$templateFile) { $templateFile = C('TMPL_FILE_NAME'); }elseif(false === strpos($templateFile,'.')){ $templateFile = str_replace(array('@',':'),'/',$templateFile); $count = substr_count($templateFile,'/'); $path = dirname(C('TMPL_FILE_NAME')); for($i=0;$i<$count;$i++) $path = dirname($path); $templateFile = $path.'/'.$templateFile.C('TMPL_TEMPLATE_SUFFIX'); } if(!file_exists_case($templateFile)) throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); return $templateFile; } private function showTime() { G('viewEndTime'); $showTime = 'Process: '.G('beginTime','viewEndTime').'s '; if(C('SHOW_ADV_TIME')) { $showTime .= '( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } if(C('SHOW_DB_TIMES') && class_exists('Db',false) ) { $showTime .= ' | DB :'.N('db_query').' queries '.N('db_write').' writes '; } if(C('SHOW_CACHE_TIMES') && class_exists('Cache',false)) { $showTime .= ' | Cache :'.N('cache_read').' gets '.N('cache_write').' writes '; } if(MEMORY_LIMIT_ON && C('SHOW_USE_MEM')) { $showTime .= ' | UseMem:'. number_format((memory_get_usage() - $GLOBALS['_startUseMems'])/1024).' kb'; } return $showTime; } private function showTrace() { $traceFile = CONFIG_PATH.'trace.php'; $_trace = is_file($traceFile)? include $traceFile : array(); $this->trace('当前页面', __SELF__); $this->trace('模板缓存', C('CACHE_PATH').md5($this->templateFile).C('TMPL_CACHFILE_SUFFIX')); $this->trace('请求方法', $_SERVER['REQUEST_METHOD']); $this->trace('通信协议', $_SERVER['SERVER_PROTOCOL']); $this->trace('请求时间', date('Y-m-d H:i:s',$_SERVER['REQUEST_TIME'])); $this->trace('用户代理', $_SERVER['HTTP_USER_AGENT']); $this->trace('会话ID' , session_id()); $log = Log::$log; $this->trace('日志记录',count($log)?count($log).'条日志<br/>'.implode('<br/>',$log):'无日志记录'); $files = get_included_files(); $this->trace('加载文件', count($files).str_replace("\n",'<br/>',substr(substr(print_r($files,true),7),0,-2))); $_trace = array_merge($_trace,$this->trace); include C('TMPL_TRACE_FILE'); } } alias_import(array( 'Model' => THINK_PATH.'/Lib/Think/Core/Model.class.php', 'Dispatcher' => THINK_PATH.'/Lib/Think/Util/Dispatcher.class.php', 'HtmlCache' => THINK_PATH.'/Lib/Think/Util/HtmlCache.class.php', 'Db' => THINK_PATH.'/Lib/Think/Db/Db.class.php', 'ThinkTemplate' => THINK_PATH.'/Lib/Think/Template/ThinkTemplate.class.php', 'Template' => THINK_PATH.'/Lib/Think/Util/Template.class.php', 'TagLib' => THINK_PATH.'/Lib/Think/Template/TagLib.class.php', 'Cache' => THINK_PATH.'/Lib/Think/Util/Cache.class.php', 'Debug' => THINK_PATH.'/Lib/Think/Util/Debug.class.php', 'Session' => THINK_PATH.'/Lib/Think/Util/Session.class.php', 'TagLibCx' => THINK_PATH.'/Lib/Think/Template/TagLib/TagLibCx.class.php', 'TagLibHtml' => THINK_PATH.'/Lib/Think/Template/TagLib/TagLibHtml.class.php', 'ViewModel' => THINK_PATH.'/Lib/Think/Core/Model/ViewModel.class.php', 'AdvModel' => THINK_PATH.'/Lib/Think/Core/Model/AdvModel.class.php', 'RelationModel' => THINK_PATH.'/Lib/Think/Core/Model/RelationModel.class.php', ) ); define('HAS_ONE',1); define('BELONGS_TO',2); define('HAS_MANY',3); define('MANY_TO_MANY',4); class Model extends Think { const MODEL_INSERT = 1; const MODEL_UPDATE = 2; const MODEL_BOTH = 3; const MUST_VALIDATE = 1; const EXISTS_VAILIDATE = 0; const VALUE_VAILIDATE = 2; private $_extModel = null; protected $db = null; protected $pk = 'id'; protected $tablePrefix = ''; protected $tableSuffix = ''; protected $name = ''; protected $dbName = ''; protected $tableName = ''; protected $trueTableName =''; protected $error = ''; protected $fields = array(); protected $data = array(); protected $options = array(); protected $_validate = array(); protected $_auto = array(); protected $_map = array(); protected $autoCheckFields = true; protected $patchValidate = false; protected $lastmodeltype = ''; public function __construct($name='',$connection='') { $this->_initialize(); if(!empty($name)) { $this->name = $name; }elseif(empty($this->name)){ $this->name = $this->getModelName(); } $this->tablePrefix = $this->tablePrefix?$this->tablePrefix:C('DB_PREFIX'); $this->tableSuffix = $this->tableSuffix?$this->tableSuffix:C('DB_SUFFIX'); $this->db(0,empty($this->connection)?$connection:$this->connection); if(!empty($this->name) && $this->autoCheckFields) $this->_checkTableInfo(); } protected function _checkTableInfo() { if(empty($this->fields)) { if(C('DB_FIELDS_CACHE')) { $this->fields = F('_fields/'.$this->name); if(!$this->fields) $this->flush(); }else{ $this->flush(); } } } public function flush() { $fields = $this->db->getFields($this->getTableName()); if(!$fields) { return false; } $this->fields = array_keys($fields); $this->fields['_autoinc'] = false; foreach ($fields as $key=>$val){ $type[$key] = $val['type']; if($val['primary']) { $this->fields['_pk'] = $key; if($val['autoinc']) $this->fields['_autoinc'] = true; } } if(C('DB_FIELDTYPE_CHECK')) $this->fields['_type'] = $type; if(C('DB_FIELDS_CACHE')){ F('_fields/'.$this->name,$this->fields); } } public function switchModel($type,$vars=array()) { $class = ucwords(strtolower($type)).'Model'; if(!class_exists($class)) throw_exception($class.L('_MODEL_NOT_EXIST_')); $this->_extModel = new $class($this->name); if(!empty($vars)) { foreach ($vars as $var) $this->_extModel->setProperty($var,$this->$var); } return $this->_extModel; } public function __set($name,$value) { $this->data[$name] = $value; } public function __get($name) { return isset($this->data[$name])?$this->data[$name]:null; } public function __isset($name) { return isset($this->data[$name]); } public function __unset($name) { unset($this->data[$name]); } public function __call($method,$args) { if(in_array(strtolower($method),array('field','table','where','order','limit','page','alias','having','group','lock','distinct'),true)) { $this->options[strtolower($method)] = $args[0]; return $this; }elseif(in_array(strtolower($method),array('count','sum','min','max','avg'),true)){ $field = isset($args[0])?$args[0]:'*'; return $this->getField(strtoupper($method).'('.$field.') AS tp_'.$method); }elseif(strtolower(substr($method,0,5))=='getby') { $field = parse_name(substr($method,5)); $where[$field] = $args[0]; return $this->where($where)->find(); }else{ throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); return; } } protected function _initialize() {} protected function _facade($data) { if(!empty($this->fields)) { foreach ($data as $key=>$val){ if(!in_array($key,$this->fields,true)){ unset($data[$key]); }elseif(C('DB_FIELDTYPE_CHECK') && is_scalar($val)) { $this->_parseType($data,$key); } } } $this->_before_write($data); return $data; } protected function _before_write(&$data) {} public function add($data='',$options=array(),$replace=false) { if(empty($data)) { if(!empty($this->data)) { $data = $this->data; $this->data = array(); }else{ $this->error = L('_DATA_TYPE_INVALID_'); return false; } } $options = $this->_parseOptions($options); $data = $this->_facade($data); if(false === $this->_before_insert($data,$options)) { return false; } $result = $this->db->insert($data,$options,$replace); if(false !== $result ) { $insertId = $this->getLastInsID(); if($insertId) { $data[$this->getPk()] = $insertId; $this->_after_insert($data,$options); return $insertId; } } return $result; } protected function _before_insert(&$data,$options) {} protected function _after_insert($data,$options) {} public function addAll($dataList,$options=array(),$replace=false){ if(empty($dataList)) { $this->error = L('_DATA_TYPE_INVALID_'); return false; } $options = $this->_parseOptions($options); foreach ($dataList as $key=>$data){ $dataList[$key] = $this->_facade($data); } $result = $this->db->insertAll($dataList,$options,$replace); if(false !== $result ) { $insertId = $this->getLastInsID(); if($insertId) { return $insertId; } } return $result; } public function selectAdd($fields='',$table='',$options=array()) { $options = $this->_parseOptions($options); if(false === $result = $this->db->selectInsert($fields?$fields:$options['field'],$table?$table:$this->getTableName(),$options)){ $this->error = L('_OPERATION_WRONG_'); return false; }else { return $result; } } public function save($data='',$options=array()) { if(empty($data)) { if(!empty($this->data)) { $data = $this->data; $this->data = array(); }else{ $this->error = L('_DATA_TYPE_INVALID_'); return false; } } $data = $this->_facade($data); $options = $this->_parseOptions($options); if(false === $this->_before_update($data,$options)) { return false; } if(!isset($options['where']) ) { if(isset($data[$this->getPk()])) { $pk = $this->getPk(); $where[$pk] = $data[$pk]; $options['where'] = $where; $pkValue = $data[$pk]; unset($data[$pk]); }else{ $this->error = L('_OPERATION_WRONG_'); return false; } } $result = $this->db->update($data,$options); if(false !== $result) { if(isset($pkValue)) $data[$pk] = $pkValue; $this->_after_update($data,$options); } return $result; } protected function _before_update(&$data,$options) {} protected function _after_update($data,$options) {} public function delete($options=array()) { if(empty($options) && empty($this->options['where'])) { if(!empty($this->data) && isset($this->data[$this->getPk()])) return $this->delete($this->data[$this->getPk()]); else return false; } if(is_numeric($options) || is_string($options)) { $pk = $this->getPk(); if(strpos($options,',')) { $where[$pk] = array('IN', $options); }else{ $where[$pk] = $options; $pkValue = $options; } $options = array(); $options['where'] = $where; } $options = $this->_parseOptions($options); $result= $this->db->delete($options); if(false !== $result) { $data = array(); if(isset($pkValue)) $data[$pk] = $pkValue; $this->_after_delete($data,$options); } return $result; } protected function _after_delete($data,$options) {} public function select($options=array()) { if(is_string($options) || is_numeric($options)) { $pk = $this->getPk(); if(strpos($options,',')) { $where[$pk] = array('IN',$options); }else{ $where[$pk] = $options; } $options = array(); $options['where'] = $where; } $options = $this->_parseOptions($options); $resultSet = $this->db->select($options); if(false === $resultSet) { return false; } if(empty($resultSet)) { return null; } $this->_after_select($resultSet,$options); return $resultSet; } protected function _after_select(&$resultSet,$options) {} public function findAll($options=array()) { return $this->select($options); } protected function _parseOptions($options=array()) { if(is_array($options)) $options = array_merge($this->options,$options); $this->options = array(); if(!isset($options['table'])) $options['table'] =$this->getTableName(); if(!empty($options['alias'])) { $options['table'] .= ' '.$options['alias']; } if(C('DB_FIELDTYPE_CHECK')) { if(isset($options['where']) && is_array($options['where'])) { foreach ($options['where'] as $key=>$val){ if(in_array($key,$this->fields,true) && is_scalar($val)){ $this->_parseType($options['where'],$key); } } } } $this->_options_filter($options); return $options; } protected function _options_filter(&$options) {} protected function _parseType(&$data,$key) { $fieldType = strtolower($this->fields['_type'][$key]); if(false === strpos($fieldType,'bigint') && false !== strpos($fieldType,'int')) { $data[$key] = intval($data[$key]); }elseif(false !== strpos($fieldType,'float') || false !== strpos($fieldType,'double')){ $data[$key] = floatval($data[$key]); }elseif(false !== strpos($fieldType,'bool')){ $data[$key] = (bool)$data[$key]; } } public function find($options=array()) { if(is_numeric($options) || is_string($options)) { $where[$this->getPk()] =$options; $options = array(); $options['where'] = $where; } $options['limit'] = 1; $options = $this->_parseOptions($options); $resultSet = $this->db->select($options); if(false === $resultSet) { return false; } if(empty($resultSet)) { return null; } $this->data = $resultSet[0]; $this->_after_find($this->data,$options); return $this->data; } protected function _after_find(&$result,$options) {} public function parseFieldsMap(&$data,$type=1) { if(!empty($this->_map)) { foreach ($this->_map as $key=>$val){ if($type==1) { if(isset($data[$val])) { $data[$key] = $data[$val]; unset($data[$val]); } }else{ if(isset($data[$key])) { $data[$val] = $data[$key]; unset($data[$key]); } } } } } public function setField($field,$value,$condition='') { if(empty($condition) && isset($this->options['where'])) $condition = $this->options['where']; $options['where'] = $condition; if(is_array($field)) { foreach ($field as $key=>$val) $data[$val] = $value[$key]; }else{ $data[$field] = $value; } return $this->save($data,$options); } public function setInc($field,$condition='',$step=1) { return $this->setField($field,array('exp',$field.'+'.$step),$condition); } public function setDec($field,$condition='',$step=1) { return $this->setField($field,array('exp',$field.'-'.$step),$condition); } public function getField($field,$condition='',$sepa=' ') { if(empty($condition) && isset($this->options['where'])) $condition = $this->options['where']; $options['where'] = $condition; $options['field'] = $field; $options = $this->_parseOptions($options); if(strpos($field,',')) { $resultSet = $this->db->select($options); if(!empty($resultSet)) { $_field = explode(',', $field); $field = array_keys($resultSet[0]); if($_field[0] == $_field[1]) $field = array_merge(array($field[0]), $field); $key = array_shift($field); $cols = array(); foreach ($resultSet as $result){ $name = $result[$key]; $cols[$name] = ''; foreach ($field as $val) $cols[$name] .= $result[$val].$sepa; $cols[$name] = substr($cols[$name],0,-strlen($sepa)); } return $cols; } }else{ $options['limit'] = 1; $result = $this->db->select($options); if(!empty($result)) { return reset($result[0]); } } return null; } public function create($data='',$type='') { if(empty($data)) { $data = $_POST; }elseif(is_object($data)){ $data = get_object_vars($data); } if(empty($data) || !is_array($data)) { $this->error = L('_DATA_TYPE_INVALID_'); return false; } $this->parseFieldsMap($data,0); $type = $type?$type:(!empty($data[$this->getPk()])?self::MODEL_UPDATE:self::MODEL_INSERT); if(!$this->autoValidation($data,$type)) return false; if(C('TOKEN_ON') && !$this->autoCheckToken($data)) { $this->error = L('_TOKEN_ERROR_'); return false; } if($this->autoCheckFields) { $vo = array(); foreach ($this->fields as $key=>$name){ if(substr($key,0,1)=='_') continue; $val = isset($data[$name])?$data[$name]:null; if(!is_null($val)){ $vo[$name] = (MAGIC_QUOTES_GPC && is_string($val))? stripslashes($val) : $val; } } }else{ $vo = $data; } $this->autoOperation($vo,$type); $this->data = $vo; return $vo; } public function mycreate($data='',$type='',$options='') { if(empty($data)) { $data = $_POST; }elseif(is_object($data)){ $data = get_object_vars($data); } if(empty($data) || !is_array($data)) { $this->error = L('_DATA_TYPE_INVALID_'); return false; } $this->parseFieldsMap($data,0); $type = $type?$type:(!empty($data[$this->getPk()])?self::MODEL_UPDATE:self::MODEL_INSERT); if(!$this->autoValidation($data,$type)) return false; if(C('TOKEN_ON') && !$this->autoCheckToken($data)) { $this->error = L('_TOKEN_ERROR_'); return false; } if($this->autoCheckFields) { $vo = array(); foreach ($this->fields as $key=>$name){ if(substr($key,0,1)=='_') continue; $val = isset($data[$name])?$data[$name]:null; if(!is_null($val)){ $vo[$name] = (MAGIC_QUOTES_GPC && is_string($val))? stripslashes($val) : $val; } } }else{ $vo = $data; } $this->autoOperation($vo,$type); $this->data = $vo; if($type == self::MODEL_UPDATE){ $this->lastmodeltype = 'save'; $result = $this->save($vo,$options); if(false !== $result) return $result; else if($data[$this->getPk()]){ $this->lastmodeltype = 'add'; return $this->add($vo,$options); } } if($type == self::MODEL_INSERT){ $this->lastmodeltype = 'add'; return $this->add($vo,$options); } } public function autoCheckToken($data) { if(C('TOKEN_ON')){ $name = C('TOKEN_NAME'); if(!isset($data[$name]) || !isset($_SESSION[$name])) { return false; } list($key,$value) = explode('_',$data[$name]); if($_SESSION[$name][$key] == $value) { unset($_SESSION[$name][$key]); return true; } if(C('TOKEN_RESET')) unset($_SESSION[$name][$key]); return false; } return true; } public function regex($value,$rule) { $validate = array( 'require'=> '/.+/', 'email' => '/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/', 'url' => '/^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/', 'currency' => '/^\d+(\.\d+)?$/', 'number' => '/^\d+$/', 'zip' => '/^[1-9]\d{5}$/', 'integer' => '/^[-\+]?\d+$/', 'double' => '/^[-\+]?\d+(\.\d+)?$/', 'english' => '/^[A-Za-z]+$/', ); if(isset($validate[strtolower($rule)])) $rule = $validate[strtolower($rule)]; return preg_match($rule,$value)===1; } private function autoOperation(&$data,$type) { if(!empty($this->_auto)) { foreach ($this->_auto as $auto){ if(empty($auto[2])) $auto[2] = self::MODEL_INSERT; if( $type == $auto[2] || $auto[2] == self::MODEL_BOTH) { switch($auto[3]) { case 'function': case 'callback': $args = isset($auto[4])?(array)$auto[4]:array(); if(isset($data[$auto[0]])) { array_unshift($args,$data[$auto[0]]); } if('function'==$auto[3]) { $data[$auto[0]] = call_user_func_array($auto[1], $args); }else{ $data[$auto[0]] = call_user_func_array(array(&$this,$auto[1]), $args); } break; case 'field': $data[$auto[0]] = $data[$auto[1]]; break; case 'string': default: $data[$auto[0]] = $auto[1]; } if(false === $data[$auto[0]] ) unset($data[$auto[0]]); } } } return $data; } protected function autoValidation($data,$type) { if(!empty($this->_validate)) { if($this->patchValidate) { $this->error = array(); } foreach($this->_validate as $key=>$val) { if(empty($val[5]) || $val[5]== self::MODEL_BOTH || $val[5]== $type ) { if(0==strpos($val[2],'{%') && strpos($val[2],'}')) $val[2] = L(substr($val[2],2,-1)); $val[3] = isset($val[3])?$val[3]:self::EXISTS_VAILIDATE; $val[4] = isset($val[4])?$val[4]:'regex'; switch($val[3]) { case self::MUST_VALIDATE: if(false === $this->_validationField($data,$val)) return false; break; case self::VALUE_VAILIDATE: if('' != trim($data[$val[0]])) if(false === $this->_validationField($data,$val)) return false; break; default: if(isset($data[$val[0]])) if(false === $this->_validationField($data,$val)) return false; } } } if(!empty($this->error)) return false; } return true; } protected function _validationField($data,$val) { if(false === $this->_validationFieldItem($data,$val)){ if($this->patchValidate) { $this->error[$val[0]] = $val[2]; }else{ $this->error = $val[2]; return false; } } return ; } protected function _validationFieldItem($data,$val) { switch($val[4]) { case 'function': case 'callback': $args = isset($val[6])?(array)$val[6]:array(); array_unshift($args,$data[$val[0]]); if('function'==$val[4]) { return call_user_func_array($val[1], $args); }else{ return call_user_func_array(array(&$this, $val[1]), $args); } case 'confirm': return $data[$val[0]] == $data[$val[1]]; case 'unique': if(is_string($val[0]) && strpos($val[0],',')) $val[0] = explode(',',$val[0]); $map = array(); if(is_array($val[0])) { foreach ($val[0] as $field) $map[$field] = $data[$field]; }else{ $map[$val[0]] = $data[$val[0]]; } if(!empty($data[$this->getPk()])) { $map[$this->getPk()] = array('neq',$data[$this->getPk()]); } if($this->field($this->getPk())->where($map)->find()) return false; return true; default: return $this->check($data[$val[0]],$val[1],$val[4]); } } public function check($value,$rule,$type='regex'){ switch(strtolower($type)) { case 'in': $range = is_array($rule)?$rule:explode(',',$rule); return in_array($value ,$range); case 'between': list($min,$max) = explode(',',$rule); return $value>=$min && $value<=$max; case 'equal': return $value == $rule; case 'regex': default: return $this->regex($value,$rule); } } public function query($sql) { if(!empty($sql)) { if(strpos($sql,'__TABLE__')) $sql = str_replace('__TABLE__',$this->getTableName(),$sql); return $this->db->query($sql); }else{ return false; } } public function execute($sql) { if(!empty($sql)) { if(strpos($sql,'__TABLE__')) $sql = str_replace('__TABLE__',$this->getTableName(),$sql); return $this->db->execute($sql); }else { return false; } } public function db($linkNum,$config='',$params=array()){ static $_db = array(); if(!isset($_db[$linkNum])) { if(!empty($config) && false === strpos($config,'/')) { $config = C($config); } $_db[$linkNum] = Db::getInstance($config); }elseif(NULL === $config){ $_db[$linkNum]->close(); unset($_db[$linkNum]); return ; } if(!empty($params)) { if(is_string($params)) parse_str($params,$params); foreach ($params as $name=>$value){ $this->setProperty($name,$value); } } $this->db = $_db[$linkNum]; return $this; } public function getModelName() { if(empty($this->name)) $this->name = substr(get_class($this),0,-5); return $this->name; } public function getTableName() { if(empty($this->trueTableName)) { $tableName = !empty($this->tablePrefix) ? $this->tablePrefix : ''; if(!empty($this->tableName)) { $tableName .= $this->tableName; }else{ $tableName .= parse_name($this->name); } $tableName .= !empty($this->tableSuffix) ? $this->tableSuffix : ''; $this->trueTableName = strtolower($tableName); } return (!empty($this->dbName)?$this->dbName.'.':'').$this->trueTableName; } public function startTrans() { $this->commit(); $this->db->startTrans(); return ; } public function commit() { return $this->db->commit(); } public function rollback() { return $this->db->rollback(); } public function getError(){ return $this->error; } public function getDbError() { return $this->db->getError(); } public function getLastInsID() { return $this->db->lastInsID; } public function getLastmodel() { return $this->lastmodeltype; } public function getLastSql() { return $this->db->getLastSql(); } public function getPk() { return isset($this->fields['_pk'])?$this->fields['_pk']:$this->pk; } public function getDbFields(){ return $this->fields; } public function data($data){ if(is_object($data)){ $data = get_object_vars($data); }elseif(is_string($data)){ parse_str($data,$data); }elseif(!is_array($data)){ throw_exception(L('_DATA_TYPE_INVALID_')); } $this->data = $data; return $this; } public function join($join) { if(is_array($join)) $this->options['join'] = $join; else $this->options['join'][] = $join; return $this; } public function setProperty($name,$value) { if(property_exists($this,$name)) $this->$name = $value; return $this; } }; class RelationModel extends Model { protected $_link = array(); public function __call($method,$args) { if(strtolower(substr($method,0,8))=='relation'){ $type = strtoupper(substr($method,8)); if(in_array($type,array('ADD','SAVE','DEL'),true)) { array_unshift($args,$type); return call_user_func_array(array(&$this, 'opRelation'), $args); } }else{ return parent::__call($method,$args); } } public function getRelationTableName($relation) { $relationTable = !empty($this->tablePrefix) ? $this->tablePrefix : ''; $relationTable .= $this->tableName?$this->tableName:$this->name; $relationTable .= '_'.$relation->getModelName(); return strtolower($relationTable); } protected function _after_find(&$result,$options) { if(!empty($options['link'])) $this->getRelation($result,$options['link']); } protected function _after_select(&$result,$options) { if(!empty($options['link'])) $this->getRelations($result,$options['link']); } protected function _after_insert($data,$options) { if(!empty($options['link'])) $this->opRelation('ADD',$data,$options['link']); } protected function _after_update($data,$options) { if(!empty($options['link'])) $this->opRelation('SAVE',$data,$options['link']); } protected function _after_delete($data,$options) { if(!empty($options['link'])) $this->opRelation('DEL',$data,$options['link']); } protected function _facade($data) { $this->_before_write($data); return $data; } protected function getRelations(&$resultSet,$name='') { foreach($resultSet as $key=>$val) { $val = $this->getRelation($val,$name); $resultSet[$key] = $val; } return $resultSet; } protected function getRelation(&$result,$name='',$return=false) { if(!empty($this->_link)) { foreach($this->_link as $key=>$val) { $mappingName = !empty($val['mapping_name'])?$val['mapping_name']:$key; if(empty($name) || true === $name || $mappingName == $name || (is_array($name) && in_array($mappingName,$name))) { $mappingType = !empty($val['mapping_type'])?$val['mapping_type']:$val; $mappingClass = !empty($val['class_name'])?$val['class_name']:$key; $mappingFields = !empty($val['mapping_fields'])?$val['mapping_fields']:'*'; $mappingCondition = !empty($val['condition'])?$val['condition']:'1=1'; $true_class_name = !empty($val['true_class_name'])?$val['true_class_name']:''; if(strtoupper($mappingClass)==strtoupper($this->name)) { $mappingFk = !empty($val['parent_key'])? $val['parent_key'] : 'parent_id'; }else{ $mappingFk = !empty($val['foreign_key'])?$val['foreign_key']:strtolower($this->name).'_id'; } $model = D($mappingClass); $model2 = D($mappingClass); if($true_class_name) $model2 = D($true_class_name); switch($mappingType) { case HAS_ONE: $pk = $result[$this->getPk()]; $mappingCondition .= " AND {$mappingFk}='{$pk}'"; $relationData = $model->where($mappingCondition)->field($mappingFields)->find(); break; case BELONGS_TO: if(strtoupper($mappingClass)==strtoupper($this->name)) { $mappingFk = !empty($val['parent_key'])? $val['parent_key'] : 'parent_id'; }else{ $mappingFk = !empty($val['foreign_key'])?$val['foreign_key']:strtolower($model->getModelName()).'_id'; } $fk = $result[$mappingFk]; $mappingCondition .= " AND {$model->getPk()}='{$fk}'"; $relationData = $model2->where($mappingCondition)->field($mappingFields)->find(); break; case HAS_MANY: $pk = $result[$this->getPk()]; $mappingCondition .= " AND {$mappingFk}='{$pk}'"; $mappingOrder = !empty($val['mapping_order'])?$val['mapping_order']:''; $mappingLimit = !empty($val['mapping_limit'])?$val['mapping_limit']:''; $relationData = $model->where($mappingCondition)->field($mappingFields)->order($mappingOrder)->limit($mappingLimit)->select(); break; case MANY_TO_MANY: $pk = $result[$this->getPk()]; $mappingCondition = " {$mappingFk}='{$pk}'"; $mappingOrder = $val['mapping_order']; $mappingLimit = $val['mapping_limit']; $mappingRelationFk = $val['relation_foreign_key']?$val['relation_foreign_key']:$model->getModelName().'_id'; $mappingRelationTable = $val['relation_table']?$val['relation_table']:$this->getRelationTableName($model); $sql = "SELECT b.{$mappingFields} FROM {$mappingRelationTable} AS a, ".$model->getTableName()." AS b WHERE a.{$mappingRelationFk} = b.{$model->getPk()} AND a.{$mappingCondition}"; if(!empty($val['condition'])) { $sql .= ' AND '.$val['condition']; } if(!empty($mappingOrder)) { $sql .= ' ORDER BY '.$mappingOrder; } if(!empty($mappingLimit)) { $sql .= ' LIMIT '.$mappingLimit; } $relationData = $this->query($sql); break; } if(!$return){ if(isset($val['as_fields']) && in_array($mappingType,array(HAS_ONE,BELONGS_TO)) ) { $fields = explode(',',$val['as_fields']); foreach ($fields as $field){ if(strpos($field,':')) { list($name,$nick) = explode(':',$field); $result[$nick] = $relationData[$name]; }else{ $result[$field] = $relationData[$field]; } } }else{ $result[$mappingName] = $relationData; } unset($relationData); }else{ return $relationData; } } } } return $result; } protected function opRelation($opType,$data='',$name='') { $result = false; if(empty($data) && !empty($this->data)){ $data = $this->data; }elseif(!is_array($data)){ return false; } if(!empty($this->_link)) { foreach($this->_link as $key=>$val) { $mappingName = $val['mapping_name']?$val['mapping_name']:$key; if(empty($name) || true === $name || $mappingName == $name || (is_array($name) && in_array($mappingName,$name)) ) { $mappingType = !empty($val['mapping_type'])?$val['mapping_type']:$val; $mappingClass = !empty($val['class_name'])?$val['class_name']:$key; $pk = $data[$this->getPk()]; if(strtoupper($mappingClass)==strtoupper($this->name)) { $mappingFk = !empty($val['parent_key'])? $val['parent_key'] : 'parent_id'; }else{ $mappingFk = !empty($val['foreign_key'])?$val['foreign_key']:strtolower($this->name).'_id'; } $mappingCondition = !empty($val['condition'])? $val['condition'] : "{$mappingFk}='{$pk}'"; $model = D($mappingClass); $mappingData = isset($data[$mappingName])?$data[$mappingName]:false; if(!empty($mappingData) || $opType == 'DEL') { switch($mappingType) { case HAS_ONE: switch (strtoupper($opType)){ case 'ADD': $mappingData[$mappingFk] = $pk; $result = $model->add($mappingData); break; case 'SAVE': $result = $model->where($mappingCondition)->save($mappingData); break; case 'DEL': $result = $model->where($mappingCondition)->delete(); break; } break; case BELONGS_TO: break; case HAS_MANY: switch (strtoupper($opType)){ case 'ADD' : $model->startTrans(); foreach ($mappingData as $val){ $val[$mappingFk] = $pk; $result = $model->add($val); } $model->commit(); break; case 'SAVE' : $model->startTrans(); $pk = $model->getPk(); foreach ($mappingData as $vo){ if(isset($vo[$pk])) { $mappingCondition = "$pk ={$vo[$pk]}"; $result = $model->where($mappingCondition)->save($vo); }else{ $vo[$mappingFk] = $data[$this->getPk()]; $result = $model->add($vo); } } $model->commit(); break; case 'DEL' : $result = $model->where($mappingCondition)->delete(); break; } break; case MANY_TO_MANY: $mappingRelationFk = $val['relation_foreign_key']?$val['relation_foreign_key']:$model->getModelName().'_id'; $mappingRelationTable = $val['relation_table']?$val['relation_table']:$this->getRelationTableName($model); if(is_array($mappingData)) { $ids = array(); foreach ($mappingData as $vo) $ids[] = $vo[$model->getPk()]; $relationId = implode(',',$ids); } switch (strtoupper($opType)){ case 'ADD': case 'SAVE': if(isset($relationId)) { $this->startTrans(); $this->table($mappingRelationTable)->where($mappingCondition)->delete(); $sql = 'INSERT INTO '.$mappingRelationTable.' ('.$mappingFk.','.$mappingRelationFk.') SELECT a.'.$this->getPk().',b.'.$model->getPk().' FROM '.$this->getTableName().' AS a ,'.$model->getTableName()." AS b where a.".$this->getPk().' ='. $pk.' AND  b.'.$model->getPk().' IN ('.$relationId.") "; $result = $model->execute($sql); if(false !== $result) $this->commit(); else $this->rollback(); } break; case 'DEL': $result = $this->table($mappingRelationTable)->where($mappingCondition)->delete(); break; } break; } } } } } return $result; } public function relation($name) { $this->options['link'] = $name; return $this; } public function relationGet($name) { if(empty($this->data)) return false; return $this->getRelation($this->data,$name,true); } } abstract class Action extends Think { protected $view = null; private $name = ''; protected $admin = ''; protected $loginname = ''; public function __construct() { $this->view = Think::instance('View'); $this->init(); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function init() { foreach($_GET as $key => $value) $this->assign($key,$value); $authcookie = Cookie::get('authcookie'); $adminauth = Cookie::get('adminauth'); list($user_name,$user_id) = explode("\t", authcode($authcookie,'DECODE')); list($unadmin,$uidadmin) = explode("\t", authcode($adminauth,'DECODE')); $this->loginname=$user_name; if ($user_name==$unadmin && $user_id==$uidadmin) { Cookie::set('adminauth', authcode("$user_name\t$user_id",'ENCODE')); $this->admin = M('Users')->where("user_id='$user_id' AND user_name='$user_name'")->find(); } else { $this->admin=''; } $this->assign('loginname',$user_name); $this->assign('admin',$this->admin); } protected function getActionName() { if(empty($this->name)) { $this->name = substr(get_class($this),0,-6); } return $this->name; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if('xmlhttprequest' == strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) return true; return false; } protected function display($templateFile='',$charset='',$contentType='text/html') { if(false === $templateFile) { $this->showTrace(); }else{ $this->view->display($templateFile,$charset,$contentType); } } protected function fetch($templateFile='',$charset='',$contentType='text/html') { return $this->view->fetch($templateFile,$charset,$contentType); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='',$charset='',$contentType='text/html') { return $this->view->buildHtml($htmlfile,$htmlpath,$templateFile,$charset,$contentType); } protected function assign($name,$value='') { $this->view->assign($name,$value); } public function __set($name,$value) { $this->view->assign($name,$value); } protected function get($name) { return $this->view->get($name); } public function __get($name) { return $this->view->get($name); } protected function trace($name,$value='') { $this->view->trace($name,$value); } public function __call($method,$parms) { if( 0 === strcasecmp($method,ACTION_NAME)) { $_action = C('_actions_'); if($_action) { if(isset($_action[MODULE_NAME.':'.ACTION_NAME])) { $action = $_action[MODULE_NAME.':'.ACTION_NAME]; }elseif(isset($_action[ACTION_NAME])){ $action = $_action[ACTION_NAME]; } if(!empty($action)) { call_user_func($action); return ; } } if(method_exists($this,'_empty')) { $this->_empty($method,$parms); }else { if(file_exists_case(C('TMPL_FILE_NAME'))) $this->display(); else throw_exception(L('_ERROR_ACTION_').ACTION_NAME); } }elseif(in_array(strtolower($method),array('ispost','isget','ishead','isdelete','isput'))){ return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method,2)); }else{ throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } } protected function error($message,$ajax=false) { C('TOKEN_RESET',false); $this->_dispatch_jump($message,0,$ajax); } protected function success($message,$ajax=false) { $this->_dispatch_jump($message,1,$ajax); } protected function ajaxReturn($data,$info='',$status=1,$type='') { if(C('LOG_RECORD')) Log::save(); $result = array(); $result['status'] = $status; $result['info'] = $info; $result['data'] = $data; if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); if(strtoupper($type)=='JSON') { header("Content-Type:text/html; charset=utf-8"); exit(json_encode($result)); }elseif(strtoupper($type)=='XML'){ header("Content-Type:text/xml; charset=utf-8"); exit(xml_encode($result)); }elseif(strtoupper($type)=='EVAL'){ header("Content-Type:text/html; charset=utf-8"); exit($data); }else{ } } protected function redirect($url,$params=array(),$delay=0,$msg='') { if(C('LOG_RECORD')) Log::save(); $url = U($url,$params); redirect($url,$delay,$msg); } private function _dispatch_jump($message,$status=1,$ajax=false) { if($ajax || $this->isAjax()) $this->ajaxReturn($ajax,$message,$status); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); $this->assign('message',$message); C('HTML_CACHE_ON',false); if($status) { if(!$this->get('waitSecond')) $this->assign('waitSecond',"1"); if(!$this->get('jumpUrl')) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ if(!$this->get('waitSecond')) $this->assign('waitSecond',"3"); if(!$this->get('jumpUrl')) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); } if(C('LOG_RECORD')) Log::save(); exit ; } protected function showTrace(){ $this->view->traceVar(); } } C(array ( 'app_debug' => false, 'app_sub_domain_deploy' => false, 'app_plugin_on' => false, 'app_file_case' => false, 'app_group_depr' => '.', 'app_group_list' => '', 'app_autoload_path' => 'Think.Util.', 'app_config_list' => '', 'cookie_expire' => 3600, 'cookie_domain' => '', 'cookie_path' => '/', 'cookie_prefix' => '', 'default_app' => '@', 'default_group' => 'Home', 'default_module' => 'Index', 'default_action' => 'index', 'default_charset' => 'utf-8', 'default_timezone' => 'PRC', 'default_ajax_return' => 'JSON', 'default_theme' => 'default', 'default_lang' => 'zh-cn', 'db_type' => 'mysql', 'db_host' => 'localhost', 'db_name' => 'myerp', 'db_user' => 'root', 'db_pwd' => '', 'db_port' => 3306, 'db_prefix' => '', 'db_suffix' => '', 'db_fieldtype_check' => true, 'db_fields_cache' => true, 'db_charset' => 'utf8', 'db_deploy_type' => 0, 'db_rw_separate' => false, 'data_cache_time' => 0, 'data_cache_compress' => false, 'data_cache_check' => false, 'data_cache_type' => 'File', 'data_cache_path' => './Myerp/Runtime/Temp/', 'data_cache_subdir' => true, 'data_path_level' => 2, 'error_message' => '您浏览的页面暂时发生了错误！请稍后再试～', 'error_page' => '', 'html_cache_on' => false, 'html_cache_time' => 60, 'html_read_type' => 0, 'html_file_suffix' => '.shtml', 'lang_switch_on' => true, 'lang_auto_detect' => false, 'log_exception_record' => true, 'log_record' => false, 'log_file_size' => 2097152, 'log_record_level' => array ( 0 => 'EMERG', 1 => 'ALERT', 2 => 'CRIT', 3 => 'ERR', ), 'session_auto_start' => true, 'var_session_id' => 'session_id', 'show_run_time' => false, 'show_adv_time' => false, 'show_db_times' => false, 'show_cache_times' => false, 'show_use_mem' => false, 'show_page_trace' => false, 'show_error_msg' => true, 'tmpl_engine_type' => 'Think', 'tmpl_detect_theme' => false, 'tmpl_template_suffix' => '.html', 'tmpl_content_type' => 'text/html', 'tmpl_cachfile_suffix' => '.php', 'tmpl_deny_func_list' => 'echo,exit', 'tmpl_deny_php' => false, 'tmpl_parse_string' => '', 'tmpl_l_delim' => '<{', 'tmpl_r_delim' => '}>', 'tmpl_var_identify' => 'array', 'tmpl_strip_space' => true, 'tmpl_cache_on' => false, 'tmpl_cache_time' => 0, 'tmpl_action_error' => './ThinkPHP/Tpl/dispatch_jump.html', 'tmpl_action_success' => './ThinkPHP/Tpl/dispatch_jump.html', 'tmpl_trace_file' => './ThinkPHP/Tpl/PageTrace.tpl.php', 'tmpl_exception_file' => './ThinkPHP/Tpl/ThinkException.tpl.php', 'tmpl_file_depr' => '/', 'taglib_begin' => '<', 'taglib_end' => '>', 'taglib_load' => true, 'taglib_build_in' => 'cx', 'taglib_pre_load' => 'Tp', 'tag_nested_level' => 3, 'token_on' => true, 'token_name' => '__hash__', 'token_type' => 'md5', 'token_reset' => false, 'page_rollpage' => 5, 'page_listrows' => 20, 'url_case_insensitive' => false, 'url_router_on' => true, 'url_route_rules' => array ( ), 'url_model' => 3, 'url_pathinfo_depr' => '/', 'url_html_suffix' => '', 'var_group' => 'g', 'var_module' => 'm', 'var_action' => 'a', 'var_page' => 'p', 'var_template' => 't', 'var_language' => 'l', 'var_ajax_submit' => 'ajax', 'var_pathinfo' => 's', 'user_auth_model' => 'Users', 'user_auth_on' => true, 'user_auth_type' => '2', 'user_auth_key' => 'user_id', 'admin_auth_key' => 'admin', 'require_auth_module' => '', 'not_auth_module' => '', 'require_auth_action' => '', 'not_auth_action' => '', 'user_auth_gateway' => '', 'rbac_role_table' => 'role', 'rbac_user_table' => 'role_user', 'rbac_access_table' => 'access', 'rbac_node_table' => 'node', 'routes' => array ( ), ));